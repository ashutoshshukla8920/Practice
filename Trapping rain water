//Trapping rain water

Input: arr[]   = {2, 0, 2}
Output: 2
Structure is like below
| |
|_|
We can trap 2 units of water in the middle gap.

Input: arr[]   = {3, 0, 0, 2, 0, 4}
Output: 10
Structure is like below
     |
|    |
|  | |
|__|_| 
We can trap "3*2 units" of water between 3 an 2,
"1 unit" on top of bar 2 and "3 units" between 2 
and 4.  See below diagram also.


int trappingrainwater(int arr[], int n)
{
  int left[n]
  for(int i = 1; i<n ; i++)
  {
    left[i] = max(left[i-1], arr[i]);
  }
  int right[n];
  right[n-1]=arr[n-1];
  for(int i = n-2; i>=0 ; i--)
  {
    right[i] = max(right[i+1], arr[i]);
  }
  for(int i = 0; i<n; i++)
  {
      result += min(left[i],right[i])-arr[i];
  }
  return result;
}

o(n) space o(1) solution
int trappingrainwater(int arr[], int n)
{
   int left_max=0 , right_max=0;
   int low = 0;
   int high = n-1;
   int water;
   while(low <= high)
   {
      if(arr[low] < arr[high])
      {
        if(arr[low] > left_max)
           left_max = arr[low];
        else
        {
            water += left_max - arr[low];
        }
        low++;
      }
      else
      {
          if(arr[high] > right_max)
            right_max = arr[high];
          else
          {
            water += right_max - arr[high];
          }
          high--;
      }
   }
   return water;
}
