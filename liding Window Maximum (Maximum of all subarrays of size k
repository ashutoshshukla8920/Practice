//Sliding Window Maximum (Maximum of all subarrays of size k)

step 1: create dequeue
step 2: run loop from 0 to k
       while(!q.empty() arr[i] >= arr[q.back()])
          q.pop_back();

      q.push_back(i);
step 3:
      for from i to n;
      cout<<arr[q.front()];
        while(!q.empty() && arr[q.front()] <= i-k)
           q.pop_front();

          while(!q.empty() arr[i] >= arr[q.back()])
              q.pop_back();

         q.push_back(i);

     void KmaximumSubArray(int arr[], int n)
     {
        dequeue<int> q(k);
        int i;

        for(int i = 0; i<k; i++)
        {
           while(!q.empty() && arr[i]>=arr[q.back()])
               q.pop_back();

            q.push_back(i);
        }
        for(;i<n; i++)
        {
           cout<<q.front()<<" ";
           while(!q.empty() && arr[q.front()] <= i-k)
               q.pop_front();

            while(!q.empty() && arr[i] >= arr[q.back()])
                q.pop_back();

            q.push_back(i);

        }
     }
