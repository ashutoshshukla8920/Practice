Solve NQueen Problem

The expected output is a binary matrix which has 1s for the blocks where queens are placed. For example, following is the output matrix for above 4 queen solution.

              { 0,  1,  0,  0}
              { 0,  0,  0,  1}
              { 1,  0,  0,  0}
              { 0,  0,  1,  0}

bool SolveNQ(int board[N][N])
{

     if(SolveNQUtil(board, 0) == false)
     {
        cout<<"soltion does not exist"<<endl;
        return false;
     }
     print(board)
     return true;
}

bool SolveNQUtil(int board[][], int col)
{
   if(col>= N)
     return true;
   for(int i = 0; i<N; i++)
   {
       if(isSafe(board, i, col))
       {
           board[i][col] = 1;
           if(SolveNQUtil(board, col+1))
              return true;
            board[i][col] = 0;
       }
   }
}

bool isSafe(int board[][], int row, int col)
{
   for(int i = 0; i<N; i++)
       if(board[row][i])
           return false;
   for(int i = row, j = col ; i>=0 && j>= 0; i--,j--)
       if(board[i][j])
          return false;
  for(int i = row, j = col ; i<N  && j>= 0; i++,j--)
        if(board[i][j])
            return false;

    return true;
}

