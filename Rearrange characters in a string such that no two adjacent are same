Rearrange characters in a string such that no two adjacent are same

Input: aaabc
Output: abaca

Input: aaabb
Output: ababa

Input: aa
Output: Not Possible

Input: aaaabc
Output: Not Possible

build priority_queue of based on priority_queue
create temporary key of char = # and freq = -1
while pq is not Empty
pop the add to result
decrease it's frequency
add prev element if freq is > 0 in to priority_queue
make curr as prev;

struct Key{
char ch;
int freq;
bool operator < (const Key &k)
{
   return freq < k.freq;
}

};

void rearrangestring(string str)
{
   int n = str.length();
   int count[256] = {0};
   for(int i = 0; i<n ;i++)
   {
     count[str[i]-'a']++;
   }
   priority_queue<Key> pq;
   for(char c = 'a' ; c <= 'z'; c++)
   {
      if(count[c-'a'])
      {
         pq.push(key{ count[c - 'a'], c});
      }
   }
   str = "";
   key prev {-1, '#'};
   while(!pq.empty())
   {
      Key k = pq.top();
      pq.pop();
      str + = k.ch;
      if(prev.freq > 0)
         pq.push(prev);

      (k.freq)--;
      prev = k;
   }
   if(n != str.length())
     cout<<"Not Possible";
  else
    cout<<str<<endl;

}
