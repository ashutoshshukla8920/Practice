/Word Boggle

Input: dictionary[] = {"GEEKS", "FOR", "QUIZ", "GO"};
       boggle[][]   = {{'G', 'I', 'Z'},
                       {'U', 'E', 'K'},
                       {'Q', 'S', 'E'}};
      isWord(str): returns true if str is present in dictionary
                   else false.

Output:  Following words of dictionary are present
         GEEKS
         QUIZ

string dictionary[] = { "GEEKS", "FOR", "QUIZ", "GO" };
int n = sizeof(dictionary) / sizeof(dictionary[0]);

void findWords(char boggle[M][N])
{
  bool visited[M][N] = {{false}};
  string str ="";
  for(int i  = 0; i<M; i++)
    for(int j = 0; j<N; j++)
    {
        findWordsUtil(boogle, visited, i, j, str)
    }
}
void findWordsUtil(char boggle[][], bool visited[][], int i, int j, string &str)
{
   visited[i][j] = true;
   str = str + boggle[i][j];

   if(isWord(str))
      cout<<str<<endl;
  for(int row = i-1; row <= i+1 && row < M; row++)
     for(int col = j-1; col <= j+1 && col < N; col++)
     {
        if(row>=0 && col >= 0 && !visited[i][j])
              findWordsUtil(boggle, visited, row,col, str);
     }
     str.erase(str.length()-1);
     visited[i][j] = false;
}
