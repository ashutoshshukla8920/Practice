//Combination Sum
Given an array of integers A and a sum B, find all unique combinations in A where the sum is equal to B.

each number in A may only be used once in the combination.

vector<vector<int>> combinationSum(vector<int> ar, int sum)
{
   sort(ar.begin(), ar.end());
   ar.erase(unique(ar.begin(),ar.end()));
   vector<int> r;
   vector<vector<int>> res;
   findNumbers(ar, sum, res, r, 0);
   return res;
}
void findNumbers(vector<int> ar, int sum, vector<vector<int>> res, vector<int> r, int i)
{
    if(sum < 0)
       return;
    if (sum == 0)
      res.push_back(r);
    while(i < ar.size() && sum-ar[i] > 0)
    {
       r.push_back(ar[i]);
       findNumbers(ar, sum-[i], res, r, i);
       i++;
       r.pop_back();
    }
}
