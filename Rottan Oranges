//Rottan Oranges

Input:  arr[][C] = { {2, 1, 0, 2, 1},
                     {1, 0, 1, 2, 1},
                     {1, 0, 0, 2, 1}};
Output:
All oranges can become rotten in 2 time frames.


Input:  arr[][C] = { {2, 1, 0, 2, 1},
                     {0, 0, 1, 2, 1},
                     {1, 0, 0, 2, 1}};
Output:
All oranges cannot be rotten.


struct ele{
int x, y;
}
bool isValid(int x, int y)
{
   if(x < 0 || x > R-1 || y < 0 || y > R-1)
      return false;
    return true;
}
bool isdelim(struct ele e)
{
   if(e.x == -1 && e.y == -1)
      return true;
  return false;
}


int rotOranges(int arr[R][C])
{
  queue<struct ele> q;
  struct ele temp;
  int time = 0;
  for(int i = 0; i<R; i++)
     for(int j = 0; j<C; j++)
     {
        if(arr[i][j] == 2)
        {
           temp.x = x;
           temp.y = y;
           q.push(temp);
        }
     }
     temp.x = -1;
     temp.y = -1;
     q.push(temp);
     while(!q.empty())
     {
         bool flag = false;
         while(!isdelim(q.front()))
         {
             temp = q.front();
             if(isvalid(temp.x-1, temp.y) && arr[temp.x-1][temp.y] == 1)
             {
                temp.x--;
                arr[temp.x][temp.y] = 2;
                if(!flag)
                {
                  time++
                  flag = true;
                }
                q.push(temp);
                temp.x++;
             }
             if(isValid(temp.x+1, temp.y) && arr[temp.x+1][temp.y] == 1)
             {
                temp.x++;
                arr[temp.x][temp.y] =2;
                if(!flag)
                {
                  time++
                  flag = true;
                }
                q.push(temp);
                temp.x--;
             }
             if(isValid(temp.x, temp.y+1) && arr[temp.x][temp.y+1] == 1)
             {
                temp.y++;
                arr[temp.x][temp.y] =2;
                if(!flag)
                {
                  time++
                  flag = true;
                }
                q.push(temp);
                temp.y--;
             }
             if(isValid(temp.x, temp.y-1) && arr[temp.x][temp.y-1] == 1)
             {
                temp.y--;
                arr[temp.x][temp.y] =2;
                if(!flag)
                {
                  time++
                  flag = true;
                }
                q.push(temp);
             }
             q.pop();

         }
         q.pop();
         if(!q.empty())
         {
          temp.x = -1;
          temp.y = -1;
          q.push(temp);
          }

     }
     return (checkall(arr)) ? -1: time;
}
