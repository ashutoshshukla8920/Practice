//solve sudoku

bool SolveSudoku(int grid[N][N])
{
  int row, col;
  if(!findUnassignedLocation(grid, row, col))
  return true;
  for(int num = 1; num <= 9; num++)
  {
     if(isSafe(grid, row, col, num))
     {
        grid[row][col] = num;
        if(SolveSudoku(grid))
           return true;
        grid[row][col] = 0;
     }
  }
  return false;
}

bool isSafe(int grid[N][N], int row, int col, int num)
{
  return !UsedInRow(grid, row, num) && !UsedInCol(grid, col, num)
          && !UsedInBox(grid, row-row%3, col-col%3, num) &&
          grid[row][col] == 0;
}

bool UsedInRow(int grid[][], int row, int num)
{
   for(int col=0; col<N; col++)
   {
      if(grid[row][col] == num)
         return true;
      return false;
   }
}

bool UsedInCol(int grid[][], int col, int num)
{
   for(int row=0; row<N; row++)
   {
      if(grid[row][col] == num)
         return true;
      return false;
   }
}

bool UsedInBox(int grid[][], int boxStartrow, int boxStartcol, int num)
{
   for(int row = 0; row < 3; row++)
      for(int col = 0; col < 3; col++)
      {
           if(grid[row+boxStartrow][col+boxStartcol] == num)
              return true;
      }
      return false;
}

bool findUnassignedLocation(int grid[][], int row, int col)
{
    for(int row = 0; row<N; row++)
       for(int col = 0; col < N; col++)
       {
           if(grid[row][col] == 0)
              return true;
       }
       return false;
}

//Word Boggle
